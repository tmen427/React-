{"ast":null,"code":"var _jsxFileName = \"/Users/tmonnie/Desktop/react2/React-/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0,\n      friends,\n      topscore: 0,\n      id: '',\n      array: []\n    };\n\n    this.score = id => {\n      this.setState({\n        count: this.state.count + 1\n      }); // add to the currrent count \n\n      if (this.state.count >= this.state.topscore) {\n        //only add to the topscore if your current score is greator \n        this.setState({\n          topscore: this.state.topscore + 1\n        });\n      }\n\n      const array = this.state.array.concat(id); // you can't use push in react, so use concat to get 'id' into an array \n\n      this.setState({\n        array: array\n      }, () => {\n        console.log('value of the array: ' + this.state.array); //making setState 'synchronous' instead of asynchrounous by using a callback function\n        // var first = this.state.array[0];\n\n        for (var i = 0; i <= this.state.array.length; i++) {\n          // for loops to check if you have clicked on an image TWICE or not \n          for (var j = 0; j <= this.state.array.length; j++) {\n            if (i !== j) {\n              if (this.state.array[i] === this.state.array[j]) {\n                // if (first === this.state.array[i+1]) {     //compares the first image you clicked on versus all the following ones, if they are equal then you lose \n                this.setState({\n                  count: 0\n                }); //restart the count\n\n                this.setState({\n                  array: []\n                }); // restart the array \n\n                if (this.state.count >= this.state.topscore) {\n                  this.setState({\n                    topscore: this.state.topscore - 1\n                  }); // make it so that the last click does not count...\n                }\n              }\n            }\n          }\n        }\n\n        const rename = this.state.friends.sort(() => 0.5 - Math.random()); //the images reshuffle when you click on them\n\n        this.setState({\n          friends: rename\n        });\n      }); // console.log(this.state.array);\n    };\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    const begin = this.state.count;\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Click on an image to score points, but don't click on an image twice!\"), this.state.topscore === 0 && React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"  \", begin === 0 ? 'Click image to start' : '', \" | Score: \", this.state.count, \" | Top Score: \", this.state.topscore, \" \"), begin > 0 && React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"  \", begin > 0 ? 'Winning!' : '', \" | Score: \", this.state.count, \" | Top Score: \", this.state.topscore, \" \"), this.state.topscore > 0 && React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \" \", begin === 0 ? 'You lost! Click on any image to play again' : '', \"     \"), this.state.friends.map(friend => React.createElement(FriendCard, {\n      id: friend.id,\n      key: friend.id,\n      name: friend.name,\n      image: friend.image,\n      occupation: friend.occupation,\n      location: friend.location,\n      count: this.state.count //reveals the state count\n      ,\n      score: this.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tmonnie/Desktop/react2/React-/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Title","friends","App","state","count","topscore","id","array","score","setState","concat","console","log","i","length","j","rename","sort","Math","random","render","begin","map","friend","name","image","occupation","location"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    count:0,\n    friends, \n    topscore: 0, \n  \n    id: '',\n    array: [], \n\n    \n  };\n\n\n\nscore = (id) => {\n       \n  this.setState({count: this.state.count + 1 })       // add to the currrent count \n      \n  if (this.state.count>=this.state.topscore) {         //only add to the topscore if your current score is greator \n  this.setState({topscore: this.state.topscore +1 })\n          }\n\n\n\n      \n      const array = this.state.array.concat(id);  // you can't use push in react, so use concat to get 'id' into an array \n      this.setState({array: array }, ()=> {console.log('value of the array: ' + this.state.array )  //making setState 'synchronous' instead of asynchrounous by using a callback function\n    \n     // var first = this.state.array[0];\n       for (var i=0; i<=this.state.array.length; i++) {         // for loops to check if you have clicked on an image TWICE or not \n          for (var j=0; j<=this.state.array.length; j++) {               \n            if (i!==j) {\n            if (this.state.array[i]===this.state.array[j]) {\n            \n            // if (first === this.state.array[i+1]) {     //compares the first image you clicked on versus all the following ones, if they are equal then you lose \n      \n          this.setState({count: 0});     //restart the count\n          this.setState({array: []});    // restart the array \n          \n          if(this.state.count>=this.state.topscore) {\n          this.setState({topscore: this.state.topscore -1 });    // make it so that the last click does not count...\n           \n            }   \n        }}}\n      }\n\n\n\n      const rename = this.state.friends.sort( ()=> 0.5-Math.random());   //the images reshuffle when you click on them\n      this.setState({friends:rename});\n    \n      }); \n      \n      \n     // console.log(this.state.array);\n    \n}\n\n\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n   const begin = this.state.count; \n\n   \n    return (\n    \n      <Wrapper>\n        <h1>Click on an image to score points, but don't click on an image twice!</h1>\n             {this.state.topscore===0 &&  <Title>  { begin ===0  ? 'Click image to start': ''} | Score: {this.state.count} | Top Score: {this.state.topscore} </Title>\n             }\n\n             {begin>0 &&   <Title>  { begin>0 ?  'Winning!' : ''} | Score: {this.state.count} | Top Score: {this.state.topscore} </Title>\n             }\n\n            {this.state.topscore>0 && <Title> {  begin===0 ? 'You lost! Click on any image to play again' : ''}     </Title>    }\n\n\n        {this.state.friends.map(friend => (\n          <FriendCard\n     \n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n            count={this.state.count}  //reveals the state count\n          \n            score={this.score}\n\n          />\n        ))}\n\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}